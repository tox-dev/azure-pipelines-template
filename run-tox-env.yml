parameters:
  jobs: []
  tox_version: 'tox'
  coverage:
    with_toxenv: ''
    for_envs: []
  dependsOn: []

jobs:
- ${{ each job in parameters.jobs }}:
  - job: ${{ coalesce(job.value.name, job.key) }}
    dependsOn: ${{ coalesce(job.value.dependsOn, parameters.dependsOn) }}
    strategy:
      matrix:
        ${{ if job.value.image }}:
          ${{ each image in job.value.image }}:
            ${{ image }}:
              ${{ if eq(image, 'linux') }}:
                image: 'ubuntu-latest'
                image_name: 'linux'
              ${{ if eq(image, 'windows') }}:
                image: 'windows-latest'
                image_name: 'windows'
              ${{ if eq(image, 'macOs') }}:
                image: 'macOS-latest'
                image_name: 'macOs'
              ${{ if notIn(image, 'macOs', 'linux', 'windows') }}:
                image: ${{ coalesce(image, 'ubuntu-latest') }}
                image_name: ${{ coalesce(image, 'linux') }}
        ${{ if not(job.value.image) }}:
          linux:
            image: 'ubuntu-latest'
            image_name: 'linux'
    pool:
      vmImage: $[ variables['image'] ]

    variables:
      TMPDIR: $(Build.BinariesDirectory)
      PIP_NO_WARN_SCRIPT_LOCATION: '0'
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      TOXENV: ${{ job.key }}
      PYTHONWARNINGS: 'ignore:::pip._internal.cli.base_command'

    steps:
    # checkout with submodules please
    - checkout: self
      displayName: checkout source code (with submodules)
      submodules: true

    # load tox
    - task: UsePythonVersion@0
      displayName: get python for tox
      inputs:
        versionSpec: '3.8'
        addToPath: false
      name: toxPython

    - ${{ if parameters.tox_version }}:
      - script: ${{ format('$(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall {0}', parameters.tox_version) }}
        displayName: ${{ format('install {0} from PyPi', parameters.tox_version) }}
    - ${{ if not(parameters.tox_version) }}:
      - script: $(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall .
        displayName: install tox inline

    - script: $(toxPython.pythonLocation)/python -m tox --version
      displayName: show tox version

    # acquire target test Python
    - ${{ if or(eq(job.key, 'py38'), startsWith(job.key, 'py38-'), eq(job.key, 'py37'), startsWith(job.key, 'py37-'), eq(job.key, 'py36'), startsWith(job.key, 'py36-'), eq(job.key, 'py35'), startsWith(job.key, 'py35-'), eq(job.key, 'py34'), startsWith(job.key, 'py34-'), eq(job.key, 'py27'), startsWith(job.key, 'p27-'), eq(job.key, 'pypy'), startsWith(job.key, 'pypy-'), eq(job.key, 'pypy3'), startsWith(job.key, 'pypy3-'), eq(job.value.py, '2.7'), eq(job.value.py, '3.4'), eq(job.value.py, '3.5'), eq(job.value.py, '3.6'), eq(job.value.py, '3.7'), eq(job.value.py, 'pypy2'), eq(job.value.py, 'pypy3')) }}:
      - task: UsePythonVersion@0
        displayName: ${{ format('provision target test python {0}', job.key) }}
        inputs:
          ${{ if job.value.py }}:
            versionSpec: ${{ job.value.py }}
          ${{ if not(job.value.py) }}:
            ${{ if or(eq(job.key, 'py27'), startsWith(job.key, 'py27-')) }}:
              versionSpec: '2.7'
            ${{ if or(eq(job.key, 'py34'), startsWith(job.key, 'py34-')) }}:
              versionSpec: '3.4'
            ${{ if or(eq(job.key, 'py35'), startsWith(job.key, 'py35-')) }}:
              versionSpec: '3.5'
            ${{ if or(eq(job.key, 'py36'), startsWith(job.key, 'py36-')) }}:
              versionSpec: '3.6'
            ${{ if or(eq(job.key, 'py37'), startsWith(job.key, 'py37-')) }}:
              versionSpec: '3.7'
            ${{ if or(eq(job.key, 'py38'), startsWith(job.key, 'py38-')) }}:
              versionSpec: '3.8'
            ${{ if or(eq(job.key, 'pypy'), startsWith(job.key, 'pypy-')) }}:
              versionSpec: 'pypy2'
            ${{ if or(eq(job.key, 'pypy3'), startsWith(job.key, 'pypy3-')) }}:
              versionSpec: 'pypy3'
          architecture: ${{ coalesce(job.value.architecture, 'x64') }}
    - ${{ if or(eq(job.key, 'py27'), startsWith(job.key, 'py27-'), eq(job.key, 'pypy'), startsWith(job.key, 'pypy-')) }}:
      - script: choco install vcpython27 --yes
        displayName: install vcpython27
    - ${{ if or(eq(job.key, 'jython'), startsWith(job.key, 'jython-')) }}:
      - script: wget http://search.maven.org/remotecontent?filepath=org/python/jython-installer/2.7.1/jython-installer-2.7.1.jar -O $(Agent.ToolsDirectory)/jython.jar
        displayName: download jython
      - script: java -jar $(Agent.ToolsDirectory)/jython.jar -sd $(Agent.ToolsDirectory)/jython -e demo src doc
        displayName: install jython
      - script: echo "##vso[task.setvariable variable=PATH]$(Agent.ToolsDirectory)/jython/bin:$(PATH)"
        displayName: add to PATH jython
      - script: 'jython -c "import sys; print(sys.version_info); print(sys.platform)'
        displayName: show jython information
    - script: 'python -c "import sys; print(sys.version); print(sys.executable);"'
      displayName: show python information

    # allow user to run global before
    - ${{ if parameters.before }}:
      - ${{ parameters.before }}

    # allow user to run per job setup
    - ${{ if job.value.before }}:
      - ${{ job.value.before }}

    # run tests
    - script: '$(toxPython.pythonLocation)/python -m tox --notest -vv --skip-missing-interpreters false'
      displayName: generate tox test environment
    - script: '$(toxPython.pythonLocation)/python -m tox'
      displayName: run tox test environment

    # upload junit result if present
    - bash: 'printf "##vso[task.setVariable variable=junit]" && ([ -f junit.$(TOXENV).xml ] && printf yes || printf no) && echo ""'
      condition: always()
      displayName: check if junit file present
      workingDirectory: '$(System.DefaultWorkingDirectory)/.tox'
    - task: PublishTestResults@2
      displayName: publish test results via junit
      condition: eq(variables.junit, 'yes')
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: '.tox/junit.$(TOXENV).xml'
        testRunTitle: 'junit-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'

    # upload coverage artifacts if present
    - ${{ if and(parameters.coverage.with_toxenv, containsValue(parameters.coverage.for_envs, job.key)) }}:
      - script:  ${{ format('$(toxPython.pythonLocation)/python -m tox -e {0} --skip-missing-interpreters false', parameters.coverage.with_toxenv) }}
        displayName: create coverag report
      - task: CopyFiles@2
        displayName: move coverage files into staging area
        inputs:
          sourceFolder: $(System.DefaultWorkingDirectory)/.tox
          contents: |
            .coverage
            coverage.xml
          targetFolder: $(Build.StagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: publish coverage file
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: 'coverage-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'

- ${{ if and(parameters.coverage.with_toxenv, parameters.coverage.for_envs) }}:
  - template: merge-coverage.yml
    parameters:
      tox_version: ${{ parameters.tox_version }}
      toxenv: ${{ parameters.coverage.with_toxenv }}
      dependsOn: ${{ parameters.coverage.for_envs }}
